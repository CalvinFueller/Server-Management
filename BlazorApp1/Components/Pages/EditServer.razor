@page "/servers/server{ServerId:int}"
@inject NavigationManager Navigation

<h3>Edit Server</h3>
<br />
<br />

@if (server != null)
{
	<EditForm Model="server" FormName="formEditServer" OnValidSubmit="Submit">
		@*Needed to perform data validation*@
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>


		@* Need this hidden input to bind the server.ServerId property. Alternatively we can implement the logic within the Submit() method directly. *@
		<InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">Name</label>
			</div>
			<div class="col-6">
				<InputText @bind-Value="server.Name" class="form-control"></InputText>
			</div>
			@*Data validation next to the input textbox*@
			<div class="col align-content-md-center">
				<ValidationMessage For="() => server.Name"></ValidationMessage>
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">City</label>
			</div>
			<div class="col-6">
				<InputText @bind-Value="server.City" class="form-control"></InputText>
			</div>
			<div class="col align-content-md-center">
				<ValidationMessage For="() => server.City"></ValidationMessage>
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">Server Status</label>
			</div>
			<div class="col-6">
				<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
			</div>
		</div>
		<br />
		<br />
		<button class="btn btn-primary" type="submit">Save</button>
		<text>&nbsp;</text>
		<a href="/servers" class="btn btn-primary">Back</a>
		@*Changed back the Back to a link due to issues with the validation process. Invalid entry would cause the button to not execute the GoBack() method.*@
		@* <button @onclick="GoBack" class="btn btn-primary">Back</button> *@
	</EditForm>

}
else
{
	<p>Server not found</p>
}

@code {
	[Parameter]
	public int ServerId { get; set; }

	[SupplyParameterFromForm(FormName = "formEditServer")] // FormName only necessary if there are multiple forms on the page
	private Server? server { get; set; }

	protected override void OnParametersSet()
	{
		server ??= ServersRepository.GetServerById(this.ServerId);
	}

	private async Task Submit()
	{
		if (server != null)
		{
			ServersRepository.UpdateServer(server.ServerId, server);
		}

		//TODO: Warum funktioniert das nicht mit private void Submit()?
		//Navigation.NavigateTo("/servers");
		GoBack();
		
		// Ensure validation completes
		// if (await Task.FromResult(true))
		// {
		// 	GoBack();
		// }
	}

	private void GoBack()
	{
		Navigation.NavigateTo("/servers");
	}
}